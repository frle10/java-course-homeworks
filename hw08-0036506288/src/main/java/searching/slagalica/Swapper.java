package searching.slagalica;

import java.util.LinkedList;
import java.util.List;

/**
 * Helper class that models objects that know how to swap two slots in a puzzle
 * described in problem 2 of the 8th homework.
 * 
 * @author Ivan Skorupan
 */
public class Swapper {
	
	/**
	 * Number of rows in the puzzle.
	 */
	private static final int ROW_LENGTH = 3;
	
	/**
	 * Number of columns in the puzzle.
	 */
	private static final int COLUMN_LENGTH = 3;
	
	/**
	 * Current puzzle configuration.
	 */
	private KonfiguracijaSlagalice slagalica;
	
	/**
	 * List of new configurations generated by swapping the empty slot
	 * with each of its adjacent slots.
	 */
	private List<KonfiguracijaSlagalice> swaps;
	
	/**
	 * Constructs a new {@link Swapper} object.
	 * 
	 * @param slagalica - current puzzle configuration
	 */
	public Swapper(KonfiguracijaSlagalice slagalica) {
		this.slagalica = slagalica;
		swaps = new LinkedList<>();
		generateSwaps();
	}
	
	/**
	 * Returns the list of states made after swapping the empty slot
	 * with each of its neighbors.
	 * 
	 * @return list of generated states made by swapping
	 */
	public List<KonfiguracijaSlagalice> getSwaps(){
		return swaps;
	}
	
	/**
	 * Method that actually implements the swapping logic.
	 */
	private void generateSwaps() {
		int[][] matrix = createMatrixFrom(slagalica.getPolje());
		int spaceX = slagalica.indexOfSpace() / ROW_LENGTH;
		int spaceY = slagalica.indexOfSpace() % COLUMN_LENGTH;
		
		if(spaceX + 1 < ROW_LENGTH) {
			int tempNum = matrix[spaceX][spaceY];
			matrix[spaceX][spaceY] = matrix[spaceX + 1][spaceY];
			matrix[spaceX + 1][spaceY] = tempNum;
			swaps.add(new KonfiguracijaSlagalice(createArrayFrom(matrix)));
		}
		
		if(spaceX - 1 >= 0) {
			matrix = createMatrixFrom(slagalica.getPolje());
			int tempNum = matrix[spaceX][spaceY];
			matrix[spaceX][spaceY] = matrix[spaceX - 1][spaceY];
			matrix[spaceX - 1][spaceY] = tempNum;
			swaps.add(new KonfiguracijaSlagalice(createArrayFrom(matrix)));
		}
		
		if(spaceY + 1 < COLUMN_LENGTH) {
			matrix = createMatrixFrom(slagalica.getPolje());
			int tempNum = matrix[spaceX][spaceY];
			matrix[spaceX][spaceY] = matrix[spaceX][spaceY + 1];
			matrix[spaceX][spaceY + 1] = tempNum;
			swaps.add(new KonfiguracijaSlagalice(createArrayFrom(matrix)));
		}
		
		if(spaceY - 1 >= 0) {
			matrix = createMatrixFrom(slagalica.getPolje());
			int tempNum = matrix[spaceX][spaceY];
			matrix[spaceX][spaceY] = matrix[spaceX][spaceY - 1];
			matrix[spaceX][spaceY - 1] = tempNum;
			swaps.add(new KonfiguracijaSlagalice(createArrayFrom(matrix)));
		}
	}
	
	/**
	 * Creates an array from given matrix of integers and returns it.
	 * 
	 * @param mat - matrix to convert to one-dimensional array
	 * @return generated array
	 */
	private int[] createArrayFrom(int[][] mat) {
		int[] array = new int[ROW_LENGTH * COLUMN_LENGTH];
		for(int i = 0; i < ROW_LENGTH; i++) {
			for(int j = 0; j < COLUMN_LENGTH; j++) {
				array[COLUMN_LENGTH * i + j] = mat[i][j];
			}
		}
		
		return array;
	}

	/**
	 * Creates a matrix from given <code>array</code> of integers and returns it.
	 * 
	 * @param array - array to convert to a matrix
	 * @return generated matrix
	 */
	private int[][] createMatrixFrom(int[] array) {
		int[][] generatedMatrix = new int[ROW_LENGTH][COLUMN_LENGTH];
		for(int i = 0; i < ROW_LENGTH; i++) {
			for(int j = 0; j < COLUMN_LENGTH; j++) {
				generatedMatrix[i][j] = array[COLUMN_LENGTH * i + j];
			}
		}
		
		return generatedMatrix;
	}
	
}
